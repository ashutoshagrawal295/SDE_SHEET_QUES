#Return true if there is a cycle in the linked list. Otherwise, return false.

##Approach 1

bool cycleDetect(node* head) {
    unordered_set<node*> hashTable;
    while(head != NULL) {
        if(hashTable.find(head) != hashTable.end()) return true;
        hashTable.insert(head);
        head = head->next;
    }
    return false;
}


**Time Complexity- O(n)
**Space Complexity- O(n)

##Approach 2

class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode*p=head,*q=head;
        while(q&&q->next)
        {
            p=p->next;
            q=q->next->next;
            if(p==q)
            {
                return 1;
            }
        }
        return 0;
    }
};

**Time Complexity- O(n)
**Space Complexity- O(1)

##Approach 3

bool detectLoop(Node* head)
{
    Node* temp = new Node;
    while (head != NULL) {
        if (head->next == NULL) {
            return false;
        }
        if (head->next == temp) {
            return true;
        }
        Node* next = head->next;
        head->next = temp;
        head = next;
    }
    return false;
}

**Time Complexity- O(n)
**Space Complexity- O(1)

##Approach 4

bool detectLoop(Node* head)
{
    if (!head)
        return 0;
    else {
        while (head) {
            if (head->key == -1) {
                return true;
            }
            else {
                head->key = -1;
                head = head->next;
            }
        }
        return 0;
    }
}

**Time Complexity- O(n)
**Space Complexity- O(1)
