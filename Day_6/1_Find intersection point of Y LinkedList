#Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. 
 If the two linked lists have no intersection at all, return null.
 
##Approach 1

node* intersectionPresent(node* head1,node* head2) {
    while(head2 != NULL) {
        node* temp = head1;
        while(temp != NULL) {
            if(temp == head2) return head2;
            temp = temp->next;
        }
        head2 = head2->next;
    }
    return NULL;
}

**Time Complexity- O(n*m)
**Space Complexity- O(1)

##Approach 2

node* intersectionPresent(node* head1,node* head2) {
     unordered_set<node*> st;
    while(head1 != NULL) {
       st.insert(head1);
       head1 = head1->next;
    }
    while(head2 != NULL) {
        if(st.find(head2) != st.end()) return head2;
        head2 = head2->next;
    }
    return NULL;

}

**Time Complexity- O(n+m)
**Space Complexity- O(n)

##Approach 3

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode* p=headA,*q=headB;
        while(p->next)
        {
            p=p->next;
        }
        p->next=headA;
        ListNode* r=headB;
        while(q&&q->next)
        {
            r=r->next;
            q=q->next->next;
            if(r==q)
            {
                r=headB;
                while(r!=q)
                {
                    r=r->next;
                    q=q->next;
                }
                p->next=NULL;
                return q;
            }
        }
        p->next=NULL;
        return NULL;
    }
};

**Time Complexity- O(n+m)
**Space Complexity- O(1)

##Approach 4

node* intersectionPresent(node* head1,node* head2) {
    node* d1 = head1;
    node* d2 = head2;
    
    while(d1 != d2) {
        d1 = d1 == NULL? head2:d1->next;
        d2 = d2 == NULL? head1:d2->next;
    }
    
    return d1;
}


**Time Complexity- O(m+n)
**Space Complexity- O(1)

##Approach 5

int getDifference(node* head1,node* head2) {
     int len1 = 0,len2 = 0;
        while(head1 != NULL || head2 != NULL) {
            if(head1 != NULL) {
                ++len1; head1 = head1->next;
            }
            if(head2 != NULL) {
                ++len2; head2 = head2->next;
            }
        }
        return len1-len2;
}
intersectionPresent(node* head1,node* head2) {
 int diff = getDifference(head1,head2);
        if(diff < 0) 
            while(diff++ != 0) head2 = head2->next; 
        else while(diff-- != 0) head1 = head1->next;
        while(head1 != NULL&&head2!=NULL) {
            if(head1 == head2) return head1;
            head2 = head2->next;
            head1 = head1->next;
        }
        return head1;
}

**Time Complexity- O(m+n)
**Space Complexity- O(1)
