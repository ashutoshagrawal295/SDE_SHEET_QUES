#Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

##Approach 1

double myPow(double x, int n) {
      double ans = 1.0;
      for (int i = 0; i < n; i++) {
        ans = ans * x;
      }
      return ans;
}

**Time Complexity- O(n)
**Space Complexity- (1)

##Approach 2

double power(double x, int y)
{
    double res = 1,c=0;
    if(y<0){
      y*=(-1);
      c=1;
    }
    while (y)
    {
        if (y % 2 == 1)
            res = (res * x);
        y = y >> 1;
        x = (x * x);
    }
    if(c)
    {
        res=1/res;
    }
    return res;
}

**Time Complexity- O(log(n))
**Space Complexity- (1)

##Approach 3

float power(float x, int y)
{
    float temp;
    if(y == 0)
        return 1;
    temp = power(x, y / 2);
    if (y % 2 == 0)
        return temp * temp;
    else
    {
        if(y > 0)
            return x * temp * temp;
        else
            return (temp * temp) / x;
    }
}

**Time Complexity- O(log(n))
**Space Complexity- (1)
