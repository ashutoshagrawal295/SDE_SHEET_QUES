#Given an array nums of size n, return the majority element.
 The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
 
##Approach 1

class Solution {
    public int majorityElement(int[] nums) {
        int majorityCount = nums.length/2;
        for (int num : nums) {
            int count = 0;
            for (int elem : nums) {
                if (elem == num) {
                    count += 1;
                }
            }
            if (count > majorityCount) {
                return num;
            }
        }
        return -1;    
    }
}

**Time Complexity- O(n*n)
**Space Complexity- O(1)

##Approach 2

Frequency array

**Time Complexity- O(n)
**Space Complexity- O(n)

##Approach 3

class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}

**Time Complexity- O(n*log(n))
**Space Complexity- O(1)

##Approach 4

class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        Integer candidate = null;

        for (int num : nums) {
            if (count == 0) {
                candidate = num;
            }
            count += (num == candidate) ? 1 : -1;
        }

        return candidate;
    }
}

**Time Complexity- O(n)
**Space Complexity- O(1)
