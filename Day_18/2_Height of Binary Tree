#Given the root of a binary tree, return its maximum depth.
 A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.
 
##Approach 1

int height(struct Node* root){
      int depth = 0;
      queue<Node*>q;
      q.push(root);
      q.push(NULL);
      while(!q.empty()){
        Node* temp = q.front();
        q.pop();
        if(temp == NULL){
            depth++;
        }
        if(temp != NULL){
            if(temp->left){
                  q.push(temp->left);
            }
              if(temp->right){
                q.push(temp->right);
            }
        }
        else if(!q.empty()){
            q.push(NULL);
        }
    }
    return depth;
}

**Time Complexity- o(n)
**Space Complexity- O(n)

##Approach 2

int height(TreeNode* root)
    {
        if(root==NULL)
        {
            return 0;
        }
        int hl=height(root->left);
        int hr=height(root->right);
        return 1+(hl>hr?hl:hr);
    }

**Time Complexity- o(logn)
**Space Complexity- O(1)
