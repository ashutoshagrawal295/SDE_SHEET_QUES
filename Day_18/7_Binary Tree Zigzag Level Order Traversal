#Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. 
 (i.e., from left to right, then right to left for the next level and alternate between).
 
##Approach 1

void printGivenLevel(struct node* root, int level, int ltr)
{
    if (root == NULL)
        return;
    if (level == 1)
        printf("%d ", root->data);
    else if (level > 1) {
        if (ltr) {
            printGivenLevel(root->left, level - 1, ltr);
            printGivenLevel(root->right, level - 1, ltr);
        }
        else {
            printGivenLevel(root->right, level - 1, ltr);
            printGivenLevel(root->left, level - 1, ltr);
        }
    }
}
void printSpiral(struct node* root)
{
    int h = height(root);
    int i;
    bool ltr = false;
    for (i = 1; i <= h; i++) {
        printGivenLevel(root, i, ltr);
        ltr = !ltr;
    }
}

**Time Complexity- O(n*n)
**Space Complexity-O(1)

##Approach 2

void printSpiral(struct node* root)
{
    if (root == NULL)
        return;
    stack<struct node*> s1;
    stack<struct node*> s2;
    s1.push(root);
    while (!s1.empty() || !s2.empty()) {
        while (!s1.empty()) {
            struct node* temp = s1.top();
            s1.pop();
            cout << temp->data << " ";
            if (temp->right)
                s2.push(temp->right);
            if (temp->left)
                s2.push(temp->left);
        }
        while (!s2.empty()) {
            struct node* temp = s2.top();
            s2.pop();
            cout << temp->data << " ";
            if (temp->left)
                s1.push(temp->left);
            if (temp->right)
                s1.push(temp->right);
        }
    }
}

**Time Complexity- O(n)
**Space Complexity-O(n)

##Approach 3

vector<int> zigZagTraversal(Node* root)
{
    deque<Node*> q;
    vector<int> v;
    q.push_back(root);
    v.push_back(root->data);
    Node* temp;
    int l = 1;
                
    while (!q.empty()) {
        int n = q.size();
 
        for (int i = 0; i < n; i++) {
            if (l % 2 == 0) {
                temp = q.back();
                q.pop_back();
            }
            else {
                temp = q.front();
                q.pop_front();
            }
            if (l % 2 != 0) {
 
                if (temp->right) {
                    q.push_back(temp->right);
                    v.push_back(temp->right->data);
                }
                if (temp->left) {
                    q.push_back(temp->left);
                    v.push_back(temp->left->data);
                }
            }
            else if (l % 2 == 0) {
 
                if (temp->left) {
                    q.push_front(temp->left);
                    v.push_back(temp->left->data);
                }
                if (temp->right) {
                    q.push_front(temp->right);
                    v.push_back(temp->right->data);
                }
            }
        }
        l++; 
    }
    return v;
}

**Time Complexity- O(n)
**Space Complexity-O(n)

##Approach 4

vector < vector < int >> zigzagLevelOrder(Node * root) {
  vector < vector < int >> result;
  if (root == NULL) {
    return result;
  }
  queue < Node * > nodesQueue;
  nodesQueue.push(root);
  bool leftToRight = true;
  while (!nodesQueue.empty()) {
    int size = nodesQueue.size();
    vector < int > row(size);
    for (int i = 0; i < size; i++) {
      Node * node = nodesQueue.front();
      nodesQueue.pop();
      int index = (leftToRight) ? i : (size - 1 - i);
      row[index] = node -> val;
      if (node -> left) {
        nodesQueue.push(node -> left);
      }
      if (node -> right) {
        nodesQueue.push(node -> right);
      }
    }
    leftToRight = !leftToRight;
    result.push_back(row);
  }
  return result;
}

**Time Complexity- O(n)
**Space Complexity-O(n)

##Approach 5

class Solution {
public:
    int height(TreeNode*root)
    {
        if(root==NULL)
        {
            return 0;
        }
        return 1 + max(height(root->left),height(root->right));
    }
    void traversal(TreeNode* root,vector<vector<int>>&v,int l)
    {
        if(root==NULL)
        {
            return ;
        }
        v[l].push_back(root->val);
            traversal(root->left,v,l+1);
            traversal(root->right,v,l+1);
    }
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        int h=height(root);
        vector<vector<int>> v(h);
        traversal(root,v,0);
        for(int i=0;i<h;i++)
        {
            if(i%2!=0)
            {
                reverse(v[i].begin(),v[i].end());
            }
        }
        return v;
    }
};

**Time Complexity- O(n)
**Space Complexity-O(1)
