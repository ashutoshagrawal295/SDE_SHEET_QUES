#Given a binary tree, determine if it is height-balanced.
 For this problem, a height-balanced binary tree is defined as: a binary tree in which the left and right subtrees of every node differ in height by no more than 1.
 
##Approach 1

bool isBalanced(struct node* root)
{
    if (root == NULL)
        return 1;
    int lh = height(root->left);
    int rh = height(root->right);
    if (abs(lh - rh) <= 1 && isBalanced(root->left) && isBalanced(root->right))
        return 1;
    return 0;
}

**Time Complexity- o(n*n)
**Space Complexity- O(1)

##Approach 2

class Solution {
public:
    bool check(TreeNode* root, int* height)
    {
        if(root==NULL)
        {
            *height=0;
            return 1;
        }
        int l=0;
        int r=0;
        if(!check(root->left,&l)||!check(root->right,&r))
        {
            return 0;
        }
        *height=max(l,r)+1;
        if(abs(l-r)>1)
        {
            return 0;
        }
        return 1;
    }
    bool isBalanced(TreeNode* root) {
        int h;
        return check(root,&h);
    }
};

**Time Complexity- o(n)
**Space Complexity- O(1)
