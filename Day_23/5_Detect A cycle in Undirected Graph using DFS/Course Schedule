#There are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi]
indicates that you must take course bi first if you want to take course ai.
For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

##Approach 1

class Solution {
public:
    bool ifcycle(int i,vector<int> adj[],vector<pair<int,int>> &vis)
    {
        if(adj[i].size()==0)
        {
            return 0;
        }
        if(vis[i].first)
        {
            if(vis[i].second)
            {
                return 0;
            }
            else
            {
                return 1;
            }
        }
        vis[i].first=1;
        for(auto it:adj[i])
        {
            if(ifcycle(it,adj,vis))
            {
                return 1;
            }
        }
        vis[i].second=1;
        return 0;
    }
    bool canFinish(int n, vector<vector<int>>& p) {
        vector<pair<int,int>> vis(n,{0,0});
        vector<int> adj[n];
        for(int i=0;i<p.size();i++)
        {
            adj[p[i][0]].push_back(p[i][1]);
        }
        for(int i=0;i<n;i++)
        {
            if(ifcycle(i,adj,vis))
            {
                return 0;
            }
        }
        return 1;
    }
};

**Time Complexity- O(V+E)
**Space Complexity- O(V+E)+O(V)
