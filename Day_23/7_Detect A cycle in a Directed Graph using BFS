#Given is a 2D adjacency list representation of a directed graph. Check whether the graph has cycles are not.
 
##Approach 1

class Solution {
  public:
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> in_degree(V, 0);
        for (int u = 0; u < V; u++) {
            for (auto v : adj[u])
                in_degree[v]++;
        }
    queue<int> q;
    for (int i = 0; i < V; i++)
        if (in_degree[i] == 0)
            q.push(i);
    int cnt = 0;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        cnt++;
        for (auto itr:adj[u])
            if (--in_degree[itr] == 0)
                q.push(itr);
    }
    if (cnt != V)
        return true;
    else
        return false;
    }
};

**Time Complexity- O(V+E)
**Space Complexity- O(V+E)+O(V)+O(V)
