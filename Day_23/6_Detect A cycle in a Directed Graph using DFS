#Given is a 2D adjacency list representation of a directed graph. Check whether the graph has cycles are not.

##Approach 1

class Solution {
  public:
    bool sol(vector<int> adj[],vector<int>&vis,vector<int>&dfsvis,int i)
    {
        vis[i]=1;
        dfsvis[i]=1;
        for(auto it:adj[i])
        {
            if(!vis[it])
            {
                if(sol(adj,vis,dfsvis,it))
                {
                    return 1;
                }
            }
            else if(dfsvis[it])
            {
                return 1;
            }
        }
        dfsvis[i]=0;
        return 0;
    }
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> vis(V,0),dfsvis(V,0);
        for(int i=0;i<V;i++)
        {
            if(!vis[i]&&sol(adj,vis,dfsvis,i))
            {
                return 1;
            }
        }
        return 0;
    }
};

**Time Complexity- O(V+E)
**Space Complexity- O(V+E)+O(V)+O(V)
