#Given a reference of a node in a connected undirected graph.Return a deep copy (clone) of the graph.Each node in the graph contains a value and a list of its neighbors.
class Node {
    public int val;
    public List<Node> neighbors;
}
The given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.

##Approach 1
 
GraphNode *cloneGraph(GraphNode *src)
{
    map<GraphNode*, GraphNode*> m;
    queue<GraphNode*> q;
    q.push(src);
    GraphNode *node;
    node = new GraphNode();
    node->val = src->val;
    m[src] = node;
    while (!q.empty())
    {
        GraphNode *u = q.front();
        q.pop();
        vector<GraphNode *> v = u->neighbours;
        int n = v.size();
        for (int i = 0; i < n; i++)
        {
            if (m[v[i]] == NULL)
            {
                node = new GraphNode();
                node->val = v[i]->val;
                m[v[i]] = node;
                q.push(v[i]);
            }
            m[u]->neighbours.push_back(m[v[i]]);
        }
    }
    return m[src];
}
 
**Time Complexity- O(V+E)
**Space Complexity- O(V+E)+O(V)+O(V)

##Approach 2
 
class Solution {
public:
    Node* clone(Node* node,unordered_map<Node*,Node*>&s)
    {
        Node *new_node= new Node(node->val);
        s[node]=new_node;
        for(auto it:node->neighbors)
        {
            if(s.find(it)==s.end())
            {
                new_node->neighbors.push_back(clone(it,s));
            }
            else
            {
                new_node->neighbors.push_back(s[it]);
            }
        }
        return new_node;
    }
    Node* cloneGraph(Node* node) {
        if(node==NULL)
        {
            return NULL;
        }
        unordered_map<Node*,Node*> s;
        return clone(node,s);
    }
};
 
**Time Complexity- O(V+E)
**Space Complexity- O(V+E)+O(V)
