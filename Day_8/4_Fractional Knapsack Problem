#Given weights and values of N items, we need to put these items in a knapsack of capacity W to get the maximum total value in the knapsack.
Note: Unlike 0/1 knapsack, you are allowed to break the item. 

##Approach 1

class Solution
{
    public:
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        double ans=0;
        sort(arr,arr+n,[](Item a,Item b){return a.value/(a.weight*1.0)>=b.value/(b.weight*1.0);});
        for(int i=0;i<n&&W;i++)
        {
            if(W>arr[i].weight)
            {
                ans+=arr[i].value;
                W-=arr[i].weight;
            }
            else
            {
                ans+=1.0*arr[i].value*W/arr[i].weight;
                W=0;
            }
        }
        return ans;
    }
        
};

**Time Complexity- O(n*logn)
**Space Complexity- O(1)
