#Given an integer array nums and an integer k, return the kth smallest element in the array.
 Note that it is the kth smallest element in the sorted order, not the kth distinct element.
 
**Approach 1

class Solution {
public:
    int findKthSmallest(vector<int>& arr, int k) {
        sort(arr.begin(), arr.end())  ;
        int n = arr.size()  ;
        return arr[k-1];
    }
};

**Time Complexity- O(n*logn)
**Space Complexity- O(1)

**Approach 2

int kthSmallest(int arr[], int n, int k)
{
    MinHeap mh(arr, n);
    for (int i = 0; i < k - 1; i++)
        mh.extractMin();
    return mh.getMin();
}

**Time Complexity- O(n + kLogn)
**Space Complexity- O(1)

**Approach 3

int kthSmallest(int arr[], int n, int k)
{
    MaxHeap mh(arr, k);
    for (int i = k; i < n; i++)
        if (arr[i] < mh.getMax())
            mh.replaceMax(arr[i]);
    return mh.getMax();
}

**Time Complexity- O(k + (n-k)*Logk)
**Space Complexity- O(1)

**Approach 4

class Solution{
    public:
    int partition(vector<int>& arr, int left, int right) {
    int pivot = arr[left] ;
    int l = left + 1 ;
    int r = right;
    while (l <= r) {
        if (arr[l] > pivot && arr[r] < pivot) {
            swap(arr[l], arr[r]);
            l++ ;
            r-- ;
        }
        if (arr[l] <= pivot) {
            l++;
        }
        if (arr[r] >= pivot) {
            r--;
        }
    }
    swap(arr[left], arr[r]);
    return r;
}
int kth_Smallest_Element(vector<int>& arr, int k) {
    int left = 0, right = arr.size() - 1, kth;
    while (1) {
        int idx = partition(arr, left, right);
        if (idx == k - 1) {
            kth = arr[idx];
            break;
        }
        if (idx < k - 1) {
            left = idx + 1;
        } else {
            right = idx - 1;
        }
    }
    return kth;
}
};

**Time Complexity- O(n)
**Space Complexity- O(1)
