#Given a roman numeral, convert it to an integer.

##Approach 1

class Solution {
public:
    int romanToInt(string s) {
        int c=0,max=1;
        unordered_map<char,int> m;
        m['V']=5;
        m['I']=1;
        m['X']=10;
        m['L']=50;
        m['C']=100;
        m['D']=500;
        m['M']=1000;
        for(int i=s.length()-1;i>=0;i--)
        {
            if(m[s[i]]<max)
            {
                c-=m[s[i]];
            }
            else
            {
                c+=m[s[i]];
                max=m[s[i]];
            }
        }
        return c;
    }
};

**Time Complexity- O(n)
**Space Complexity- O(1)

#Given an integer n, your task is to complete the function convertToRoman which prints the corresponding roman number of n.

##Approach 1

string integerToRoman(int num) {
  unordered_map<int, char> roman;
  roman[1] = 'I';
  roman[5] = 'V';
  roman[10] = 'X';
  roman[50] = 'L';
  roman[100] = 'C';
  roman[500] = 'D';
  roman[1000] = 'M';  
  string tmp = to_string(num);
  const int numDigits = tmp.length();  
  string res = "";
  for(int i=0;i<numDigits;++i) {
    const char src = tmp[i];
    const int number = (src - '0');
    const int place = (numDigits-1)-i;
    const int absolute = pow(10, place);    
    if (number == 9) {
        res.append(1, roman[absolute]);
        res.append(1, roman[(number+1) * absolute]);
    }  else
    if (number >= 5) {
        res.append(1, roman[5*absolute]);
        res.append(number-5, roman[absolute]);
    }  else
    if (number >= 4) {
        res.append(1, roman[absolute]);
        res.append(1, roman[5*absolute]);
    } else {
        res.append(number, roman[absolute]);
    }
  }
  return res;
}

**Time Complexity- O(n)
**Space Complexity- O(1)
