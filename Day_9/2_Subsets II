#Given an integer array nums that may contain duplicates, return all possible subsets (the power set).
 The solution set must not contain duplicate subsets. Return the solution in any order.
 
##Approach 1

vector<vector<int> > findPowerSet(vector<int>& nums)
{
    int bits = nums.size(); 
    unsigned int pow_set_size = pow(2, bits); 
    sort(nums.begin(), nums.end());   
    vector<vector<int>> ans;
    vector<string> list;  
    for (int counter = 0; counter < pow_set_size; counter++) {
        vector<int> subset;
        string temp = "";
        for (int j = 0; j < bits; j++) {
            if (counter & (1 << j)) {
                subset.push_back(nums[j]);
                temp += to_string(nums[j]) + '$';
            }
        }
        if (find(list.begin(), list.end(), temp) == list.end()) {
            ans.push_back(subset);
            list.push_back(temp);
        }
    }
    return ans;
}

**Time Compexity- O(k*n*2^n)
**Space Complexity- O(k*2^n)

##Approach 2

class Solution {
public:
    void subset(vector<int>& nums,vector<vector<int>> &v,vector<int>& vec,int n)
    {
        if(n==0)
        {
            v.push_back(vec);
            return;
        }
        if(vec.empty()||vec.back()!=nums[n-1])
        {
            subset(nums,v,vec,n-1);
        }
        vec.push_back(nums[n-1]);
        subset(nums,v,vec,n-1);
        vec.pop_back();
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        sort(nums.begin(),nums.end());
        vector<vector<int>> v;
        vector<int> vec;
        subset(nums,v,vec,nums.size());
        return v;
    }
};

**Time Compexity- O(k*2^n)
**Space Complexity- O(k*2^n)
