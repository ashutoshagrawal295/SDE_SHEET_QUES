#Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target
You may return the combinations in any order.The same number may be chosen from candidates an unlimited number of times.

##Approach 1

class Solution {
public:
    void cs(vector<int>& candidates, int target,vector<vector<int>> &v,vector<int>& vec,int k){
        if(k==candidates.size())
        {
            if(target==0)
            {
                v.push_back(vec);
                return ;
            }
            return ;
        }
        if(candidates[k]<=target)
        {
            vec.push_back(candidates[k]);
            cs(candidates,target-candidates[k],v,vec,k);
            vec.pop_back();
        }
        cs(candidates,target,v,vec,k+1);
    }
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> v;
        vector<int> vec;
        cs(candidates,target,v,vec,0);
        return v;
    }
};

**Time Compexity- O(2^(t*k)
**Space Complexity- O(k*x)where t is the target,k is the average length and x is the no. of combinations.
