#Ninja has to implement a data structure ”TRIE” from scratch. Ninja has to complete some functions.
 Trie(): Ninja has to initialize the object of this “TRIE” data structure.
 insert(“WORD”): Ninja has to insert the string “WORD”  into this “TRIE” data structure.
 countWordsEqualTo(“WORD”): Ninja has to return how many times this “WORD” is present in this “TRIE”.
 countWordsStartingWith(“PREFIX”): Ninjas have to return how many words are there in this “TRIE” that have the string “PREFIX” as a prefix.
 erase(“WORD”): Ninja has to delete one occurrence of the string “WORD” from the “TRIE”.
 
##Approach 1

class node{
    node* links[26];
    int ew=0;
    int sw=0;
    public:
    bool contain(char c)
    {
        return (links[c-'a']!=NULL);
    }
    void put(char c,node* n)
    {
        links[c-'a']=n;
    }
    node *get(char c)
    {
        return links[c-'a'];
    }
    void increaseEw() {
    ew++;
  }
  void increaseSw() {
    sw++;
  }
  void decreaseEw() {
    ew--;
  }
  void decreaseSw() {
    sw--;
  }
  int getEw() {
    return ew;
  }
  int getSw() {
    return sw;
  }
};
class Trie {
    node* root;
public:
    Trie() {
        root=new node();
    }
    void insert(string &word){
        node* n=root;
        for(int i=0;i<word.length();i++)
        {
            if(!n->contain(word[i]))
            {
                n->put(word[i],new node());
            }
            n=n->get(word[i]);
            n->increaseSw();
        }
        n->increaseEw();
    }
    
    int countWordsEqualTo(string &word){
        node* n=root;
        for(int i=0;i<word.length();i++)
        {
            if(!n->contain(word[i]))
            {
                return 0;
            }
            n=n->get(word[i]);
        }
        return n->getEw();
    }
    
    int countWordsStartingWith(string &word){
        node* n=root;
        for(int i=0;i<word.length();i++)
        {
            if(!n->contain(word[i]))
            {
                return 0;
            }
            n=n->get(word[i]);
        }
        return n->getSw();
    }
    void erase(string &word){
        node* n=root;
        for(int i=0;i<word.length();i++)
        {
            n=n->get(word[i]);
            n->decreaseSw();
        }
        n->decreaseEw();
    }
};


**Time Complexity- O(n)
**Space Complexity- O(1)
