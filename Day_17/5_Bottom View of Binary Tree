#Given a binary tree, print the bottom view from left to right.A node is included in bottom view if it can be seen when we look at the tree from bottom.
 If there are multiple bottom-most nodes for a horizontal distance from root, then print the later one in level traversal.
 
##Approach 1

class Solution {
  public:
    vector <int> bottomView(Node *root) {
        vector<int> v;
        unordered_map<int,int> m;
        int min=0,max=0;
        queue<pair<Node*,int>>q;
        q.push({root,0});
        while(!q.empty())
        {
            auto p=q.front();
            q.pop();
            m[p.second]=p.first->data;
            if(p.first->left)
            {
                q.push({p.first->left,p.second-1});
            }
            if(p.first->right)
            {
                q.push({p.first->right,p.second+1});
            }
            if(min>p.second)
            {
                min=p.second;
            }
            else if(max<p.second)
            {
                max=p.second;
            }
        }
        for(int i=min;i<=max;i++)
        {
            v.push_back(m[i]);
        }
        return v;
    }
};

**Time Complexity- O(n)
**Space Complexity- O(n)
