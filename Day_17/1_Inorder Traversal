#Given the root of a binary tree, return the inorder traversal of its nodes' values.

##Approach 1

    vector<int> v;
    vector<int> inorderTraversal(TreeNode* root) {
        if(root==NULL)
        {
            return v;
        }
        inorderTraversal(root->left);
        v.push_back(root->val);
        inorderTraversal(root->right);
        return v;
    }

**Time Complexity- O(n)
**Space Complexity-O(1)

##Approach 2

      vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        stack<TreeNode*> s;
        TreeNode* p=root;
        while(p!=NULL||s.empty()==false)
        {
            while(p!=NULL)
            {
                s.push(p);
                p=p->left;
            }
            p=s.top();
            s.pop();
            v.push_back(p->val);
            p=p->right;  
        }
        return v;
    }

**Time Complexity- O(n)
**Space Complexity-O(n)

##Approach 3

    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> v;
        TreeNode* p=root,*q;
        while(p!=NULL)
        {
            if(p->left==NULL)
            {
                v.push_back(p->val);
                p=p->right;
            }
            else
            {
                q=p->left;
                while(q->right!=NULL&&q->right!=p)
                {
                    q=q->right;
                }
                if(q->right==NULL)
                {
                    q->right=p;
                    p=p->left;
                }
                else
                {
                    q->right=NULL;
                    v.push_back(p->val);
                    p=p->right;
                }
            }
        }
        return v;
    }

**Time Complexity- O(n)(3 traversal)
**Space Complexity-O(1)
