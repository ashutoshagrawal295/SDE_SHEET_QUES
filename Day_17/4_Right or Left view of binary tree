#Given a Binary Tree, print Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side.

##Approach 1

vector<int> leftView(Node *root)
{
   vector<int> v;
        if(root==NULL)
        {
            return v;
        }
        Node* p;
        queue<Node*> q;
        v.push_back(root->data);
        q.push(root);
        q.push(NULL);
        while(q.empty()==false)
        {
            p=q.front();
            q.pop();
            if(p==NULL)
            {
                if(q.empty()==false)
                {
                    v.push_back(q.front()->data);
                    q.push(NULL);
               }
            }
            else
            {
                if(p->left)
                {
                    q.push(p->left);
                }
                if(p->right)
                {
                    q.push(p->right);
                }
            }
        }
        return v;
}


**Time Complexity- O(n)
**Space Complexity-O(n)

##Approach 2

class Solution {
public:
    void recursion(TreeNode *root, int level, vector<int> &res)
    {
        if(root==NULL) return ;
        if(res.size()==level) res.push_back(root->val);
        recursion(root->left, level+1, res);
        recursion(root->right, level+1, res);
    }
    
    vector<int> leftSideView(TreeNode *root) {
        vector<int> res;
        recursion(root, 0, res);
        return res;
    }
};

**Time Complexity- O(n)
**Space Complexity-O(1)
