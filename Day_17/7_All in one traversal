#Write a program to print Preorder, Inorder, and Postorder traversal of the tree in a single traversal.

##Approach 1

void allTraversal(node * root, vector < int > & pre, vector < int > & in , vector < int > & post) {
  stack < pair < node * , int >> st;
  st.push({root,1});
  if (root == NULL) return;
  while (!st.empty()) {
    auto it = st.top();
    st.pop();
    if (it.second == 1) {
      pre.push_back(it.first -> data);
      it.second++;
      st.push(it);
      if (it.first -> left != NULL) {
        st.push({it.first -> left,1});
      }
    }
    else if (it.second == 2) {
      in .push_back(it.first -> data);
      it.second++;
      st.push(it);

      if (it.first -> right != NULL) {
        st.push({it.first -> right,1});
      }
    }
    else {
      post.push_back(it.first -> data);
    }
  }
}

**Time Complexity- O(n)
**Space Complexity- O(n)

##Approach 2

void traversal( vector<int> &i, vector<int> &pre, vector<int> &post,BinaryTreeNode<int> *root){
    if(root==NULL)
    {
        return;
    }
    pre.push_back(root->data);
    traversal(i,pre,post,root->left);
    i.push_back(root->data);
    traversal(i,pre,post,root->right);
    post.push_back(root->data);
}
vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    vector<int> i;
    vector<int> pre;
    vector<int> post;
    vector<vector<int>> v;
    traversal(i,pre,post,root);
    v.push_back(i);
    v.push_back(pre);
    v.push_back(post);
    return v;
}

**Time Complexity- O(n)
**Space Complexity- O(1)
