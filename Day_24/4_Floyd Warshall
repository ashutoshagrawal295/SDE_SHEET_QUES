#The problem is to find shortest distances between every pair of vertices in a given edge weighted directed Graph. The Graph is represented as adjancency matrix, 
 and the matrix denotes the weight of the edegs (if it exists) else -1. Do it in-place.
 
##Approach 1

class Solution {
  public:
	void shortest_distance(vector<vector<int>>&dist){
	    int V=dist.size();
	    for (int k = 0; k < V; k++){ 
            for (int i = 0; i < V; i++) {
                for (int j = 0; j < V; j++) {
                    if ((dist[i][j] > (dist[i][k] + dist[k][j])||dist[i][j]==-1)
                        && (dist[k][j] != -1
                            && dist[i][k] != -1))
                        dist[i][j] = dist[i][k] + dist[k][j];
                }
            }
    }
	}
};

**Time Complexity- O(V*V*V)
**Space Complexity- O(V*V)
