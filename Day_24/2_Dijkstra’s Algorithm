#Given a weighted, undirected and connected graph of V vertices and E edges, Find the shortest distance of all the vertex's from the source vertex src.
 Note: The Graph doesn't contain any negative weight cycle.
 
##Approach 1

class Solution
{
	public:
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int src)
    {
        vector<int> dist(V,INT_MAX);
        set<pair<int,int>> s;
        dist[src]=0;
        s.insert({0,src});
        while(!s.empty())
        {
            auto p=*s.begin();
            s.erase(p);
            for(auto it:adj[p.second])
            {
                if(dist[it[0]]>p.first+it[1])
                {
                    dist[it[0]]=p.first+it[1];
                    s.insert({dist[it[0]],it[0]});
                }
            }
        }
        return dist;
    }
};

**Time Complexity- O((V+E)*logV)
**Space Complexity- O(V+E)+O(V)+O(V)

##Approach 2

class Solution
{
	public:
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int src)
    {
        vector<int> dist(V,INT_MAX);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> s;
        dist[src]=0;
        s.push({0,src});
        while(!s.empty())
        {
            auto p=s.top();
            s.pop();
            for(auto it:adj[p.second])
            {
                if(dist[it[0]]>p.first+it[1])
                {
                    dist[it[0]]=p.first+it[1];
                    s.push({dist[it[0]],it[0]});
                }
            }
        }
        return dist;
    }
};

**Time Complexity- O((V+E)*logV)
**Space Complexity- O(V+E)+O(V)+O(V)
