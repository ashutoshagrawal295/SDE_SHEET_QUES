#You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).

##Approach 1

vector < vector < int >> rotate(vector < vector < int >> & matrix) {
  int n = matrix.size();
  vector < vector < int >> rotated(n, vector < int > (n, 0));
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      rotated[j][n - i - 1] = matrix[i][j];
    }
  }
  return rotated;
}

**Time Complexity- O(n*n)
**Space Complexity- O(n*n)

##Approach 2

void rotateMatrix(int mat[][N])
{
    for (int x = 0; x < N / 2; x++) {
        for (int y = x; y < N - x - 1; y++) {
            int temp = mat[x][y];
            mat[x][y] = mat[N - 1 - y][x];
            mat[N - 1 - y][x] = mat[N - 1 - x][N - 1 - y];
            mat[N - 1 - x][N - 1 - y] = mat[y][N - 1 - x];
            mat[y][N - 1 - x] = temp;
        }
    }
}

**Time Complexity- O(n*n)
**Space Complexity- O(1)

##Approach 3

void rotate(vector < vector < int >> & matrix) {
  int n = matrix.size();
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < i; j++) {
      swap(matrix[i][j], matrix[j][i]);
    }
  }
  for (int i = 0; i < n; i++) {
    reverse(matrix[i].begin(), matrix[i].end());
  }
}

**Time Complexity- O(n*n)
**Space Complexity- O(1)
