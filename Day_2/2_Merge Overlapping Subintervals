#Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals.

##Approach 1

vector < pair < int, int >> merge(vector < pair < int, int >> & arr) {
  int n = arr.size();
  sort(arr.begin(), arr.end());
  vector < pair < int, int >> ans;
  for (int i = 0; i < n; i++) {
    int start = arr[i].first, end = arr[i].second;
    if (!ans.empty()) {
      if (start <= ans.back().second) {
        continue;
      }
    }
    for (int j = i + 1; j < n; j++) {
      if (arr[j].first <= end) {
        end = max(end,arr[j].second);
      }
    }
    ans.push_back({
      start,
      end
    });
  }
  return ans;
}

**Time Complexity- O(n*n)
**Space Complexity- O(n)

##Approach 2

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> vec;
        sort(intervals.begin(),intervals.end());
        vec.push_back(intervals[0]);
        for(int i=1;i<intervals.size();i++)
        {
            if(intervals[i][0]<=vec.back()[1])
            {
                if(intervals[i][1]>vec.back()[1])
                {
                    vec.back()[1]=intervals[i][1];
                }
            }
            else
            {
                vec.push_back(intervals[i]);
            }
        }
        return vec;
    }
};

**Time Complexity- O(n*log(n))
**Space Complexity- O(n)
