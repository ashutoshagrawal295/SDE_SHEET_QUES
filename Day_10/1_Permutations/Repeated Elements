#Given a string that may contain duplicates, write a function to print all permutations of given string such that no permutation is repeated in output.

##Approach 1

void permute(string str)
{
    sort(str.begin(), str.end());
    do {
       cout << str << endl;
    } while (next_permutation(str.begin(), str.end()));
}

**Time Complexity- O(n!*n)
**Space Complexity- O(1)

##Approach 2

int compare(const void* a, const void* b)
{
    return (*(char*)a - *(char*)b);
}
void swap(char* a, char* b)
{
    char t = *a;
    *a = *b;
    *b = t;
}
int findCeil(char str[], char first, int l, int h)
{
    int ceilIndex = l;
    for (int i = l + 1; i <= h; i++)
        if (str[i] > first && str[i] < str[ceilIndex])
            ceilIndex = i;
    return ceilIndex;
}
void sortedPermutations(char str[])
{
    int size = strlen(str);
    qsort(str, size, sizeof(str[0]), compare);
    bool isFinished = false;
    while (!isFinished) {
        static int x = 1;
        cout << x++ << " " << str << endl;
        int i;
        for (i = size - 2; i >= 0; --i)
            if (str[i] < str[i + 1])
                break;
        
        if (i == -1)
            isFinished = true;
        else {         
            int ceilIndex = findCeil(str, str[i], i + 1, size - 1);
            swap(&str[i], &str[ceilIndex]);
            qsort(str + i + 1, size - i - 1, sizeof(str[0]), compare);
        }
    }
}

**Time Complexity- O(n*n*n!)
**Space Complexity- O(1)

##Approach 3

void printAllPermutationsFast(string s, string l)
{
    if (s.length() < 1)
        cout << l + s << endl;
    unordered_set<char> uset;
    for (int i = 0; i < s.length(); i++)
    {
        if (uset.find(s[i]) != uset.end())
            continue;
        else
            uset.insert(s[i]);
        string temp = "";
        if (i < s.length() - 1)
            temp = s.substr(0, i) + s.substr(i + 1);
        else
            temp = s.substr(0, i);
        printAllPermutationsFast(temp, l + s[i]);
    }
}

**Time Complexity- O(n*n!)
**Space Complexity- O(n)
