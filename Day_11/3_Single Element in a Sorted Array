#You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
 Return the single element that appears only once.
 
 ##Approach 1

int search(int arr[], int n)
{
    int ans = -1;
    for (int i = 0; i < n; i += 2) {
        if (arr[i] != arr[i + 1]) {
            ans = arr[i];
            break;
        }
    }
    if (arr[n - 2] != arr[n - 1])
            ans = arr[n-1];
    return ans;
}

**Time Complexity- O(n)
**Space Complexity- O(1)

##Approach 2

class Solution {
    public:
        int findSingleElement(vector < int > & nums) {            
            int n = nums.size();
            int elem = 0;
            for (int i = 0; i < n; i++) {
                elem = elem ^ nums[i];
            }
            return elem;
        }
};

**Time Complexity- O(n)
**Space Complexity- O(1)

##Approach 3

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int l=0,h=nums.size()-1;
        int mid;
        while(l<=h)
        {
            mid=l+(h-l)/2;
            if(mid!=0&&nums[mid]==nums[mid-1])
            {
                if(mid%2==0)
                {
                    h=mid-2;
                }
                else
                {
                    l=mid+1;
                }
            }
            else if(mid!=nums.size()-1&&nums[mid]==nums[mid+1])
            {
                if(mid%2==0)
                {
                    l=mid+2;
                }
                else
                {
                    h=mid-1;
                }
            }
            else{
                return nums[mid];
            }
        }
        return 0;
    }
};

**Time Complexity- O(log(n))
**Space Complexity- O(1)
