#There is an integer array nums sorted in ascending order (with distinct values).Prior to being passed to your function, nums is possibly rotated at an unknown pivot 
 index k (1 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed).
 Given the array nums after the possible rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.
 
 ##Approach 1

int search(vector<int>& nums,int target) {
    for(int i=0;i<nums.size();i++)
    {
        if(nums[i]==target)
        return i;
    }
    return -1;    
}

**Time Complexity- O(n)
**Space Complexity- O(1)

##Approach 2

int search(vector < int > & nums, int target) {
  int low = 0, high = nums.size() - 1; 
  while (low <= high) { 
    int mid = (low + high) >> 1; 
    if (nums[mid] == target)
      return mid; 
    if (nums[low] <= nums[mid]) { 
      if (nums[low] <= target && nums[mid] >= target)
        high = mid - 1; 
      else
        low = mid + 1; 
    } else { 
      if (nums[mid] <= target && target <= nums[high])
        low = mid + 1;
      else
        high = mid - 1;
    }
  }
  return -1; 
}
**Time Complexity- O(logn)
**Space Complexity- O(1)
