#Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

##Approach 1

class Solution {
public:
    int strStr(string haystack, string needle) {
        int n=haystack.length(),m=needle.length();
        for(int i=0;i<n-m;i++)
        {
            int j;
            for(j=0;j<m;j++)
            {
                if(haystack[i+j]!=needle[j])
                {
                    break;
                }
            }
            if(j==m)
            {
                return i;
            }
        }
        return -1;
    }
};

**Time Complexity- O(n*m)
**Space Complexity- O(1)

##Approach 2

class Solution {
public:
    int strStr(string haystack, string needle) {
        int n=haystack.length(),m=needle.length();
        int d=26;
        int q=INT_MAX;
        long long t=0,p=0,h=1;
        for(int i=0;i<m;i++)
        {
            t=((t*d)+needle[i]-'a')%q;
            p=((p*d)+haystack[i]-'a')%q;
        }
        for(int i=0;i<m-1;i++)
        {
            
            h=(h*d)%q;
        }
        for(int i=0;i<=n-m;i++)
        {
            if(p==t)
            {
                int j;
                for(j=0;j<m;j++)
                {
                    if(haystack[i+j]!=needle[j])
                    {
                        cout<<i+j<<endl;
                        break;
                    }
                }
                if(j==m)
                {
                    return i;
                }
            }
            else
            {
                if(i<n-m)
                {
                    p=((p-(haystack[i]-'a')*h)*d+haystack[i+m]-'a')%q;
                    if(p<0)
                    {
                        p+=q;
                    }
                }
            }
        }
        return -1;
    }
};

**Time Complexity- O(n) worst O(n*m)
**Space Complexity- O(1)

##Approach 3

class Solution {
public:
    int strStr(string haystack, string needle) {
        int n=haystack.length(),m=needle.length();
        int lps[m];
        lps[0]=0;
        int i=1,len=0;
        while(i<m)
        {
            if(needle[i]==needle[len])
            {
                len++;
                lps[i]=len;
                i++;
            }
            else
            {
                if(len>0)
                {
                    len=lps[len-1];
                }
                else
                {
                    lps[i]=len;
                    i++;
                }
            }
        }
        int j=0;i=0;
        while(i<n)
        {
            if(haystack[i]==needle[j])
            {
                j++;
                i++;
            }
            else
            {
                if(j>0)
                {
                    j=lps[j-1];
                }
                else
                {
                    i++;
                }
            }
            if(j==m)
            {
                return i-j;
            }
        }
        return -1;
    }
};

**Time Complexity- O(n)
**Space Complexity- O(m)
