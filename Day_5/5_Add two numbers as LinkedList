#You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
 Add the two numbers and return the sum as a linked list.
 
 ##Approach 1

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *dummy = new ListNode(); 
        ListNode *temp = dummy; 
        int carry = 0;
        while( (l1 != NULL || l2 != NULL) || carry) {
            int sum = 0; 
            if(l1 != NULL) {
                sum += l1->val; 
                l1 = l1 -> next; 
            }
            
            if(l2 != NULL) {
                sum += l2 -> val; 
                l2 = l2 -> next; 
            }
            
            sum += carry; 
            carry = sum / 10; 
            ListNode *node = new ListNode(sum % 10); 
            temp -> next = node; 
            temp = temp -> next; 
        }
        return dummy -> next; 
    }
};

**Time Complexity- O(max(m,n))
**Space Complexity- O(max(m,n))

##Approach 2

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode*p=l1,*q=l2;
        int c=0;
        while(p&&q)
        {
            p->val+=(q->val+c);
            c=p->val/10;
            p->val%=10;
            q->val=p->val;
            p=p->next;
            q=q->next;
        }
        if(c)
        {
            if(!p&&!q)
            {
                ListNode*r=new ListNode(1);
                p=l1;
                while(p->next)
                {
                    p=p->next;
                }
                p->next=r;
                return l1;
            }
            while(p)
            {
                if(c)
                {
                    p->val+=c;
                    c=p->val/10;
                    p->val%=10;
                    if(c&&!(p->next))
                       {
                           ListNode*r=new ListNode(1);
                           p->next=r;
                           c=0;
                       }
                    p=p->next;
                }
                else
                {

                    return l1;
                }
            }
            while(q)
            {
                l1=l2;
                if(c)
                {
                    q->val+=c;
                    c=q->val/10;
                    q->val%=10;
                    if(c&&!(q->next))
                       {
                           ListNode*r=new ListNode(1);
                           q->next=r;
                           c=0;
                       }
                    q=q->next;
                }
                else
                {
                    return l2;
                }
            }
        }
        else
        {
            if(p)
            {
                return l1;
            }
            else
            {
                return l2;
            }
        }
        return l1;
    }
};

**Time Complexity- O(max(m,n))
**Space Complexity- O(1)
