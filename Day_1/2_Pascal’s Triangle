#Given an integer numRows, return the first numRows of Pascal's triangle.

##Approach 1

void printPascal(int n)
{
    for (int line = 0; line < n; line++)
    {
        for (int i = 0; i <= line; i++)
            cout <<" "<< binomialCoeff(line, i);
        cout <<"\n";
    }
}
int binomialCoeff(int n, int k)
{
    int res = 1;
    if (k > n - k)
    k = n - k;
    for (int i = 0; i < k; ++i)
    {
        res *= (n - i);
        res /= (i + 1);
    }
    return res;
}


**Time Complexity- O(n*n*n)
**Space Complexity-** O(1)

##Approach 2

class Solution {
public:
    vector<vector<int>> generate(int n) {
        vector<vector<int>> v(n);
        if(n==1)
        {
            v[0].push_back(1);
        }
        else if(n==2)
        {
            v[0].push_back(1);
            v[1].push_back(1);
            v[1].push_back(1);
        }
        else
        {
            v[0].push_back(1);
            v[1].push_back(1);
            v[1].push_back(1);
            for(int i=2;i<n;i++)
            {
                v[i].push_back(1);
                for(int j=1;j<v[i-1].size();j++)
                {
                    v[i].push_back(v[i-1][j-1]+v[i-1][j]);
                }
                v[i].push_back(1);
            }
        }
        return v;
    }
};

**Time Complexity- O(n*n)
**Space Complexity-** O(n*n)

##Approach 3

void printPascal(int n)
{
     
for (int line = 1; line <= n; line++)
{
    int C = 1; 
    for (int i = 1; i <= line; i++)
    {
        cout<< C<<" ";
        C = C * (line - i) / i;
    }
    cout<<"\n";
}
}

**Time Complexity- O(n*n)
**Space Complexity-** O(1)
