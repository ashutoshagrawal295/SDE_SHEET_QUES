#Given an array of integers nums, find the next permutation of nums.

##Approach 1

Find all possible permutations of elements present,store them,search for the given and print next.

**Time Complexity- O(n*n!)
**Space Complexity- O(n!)

##Approach 2

int main() {
    int arr[] = {1,3,2};
    
    next_permutation(arr,arr+3);
    
    cout<<arr[0]<<" "<<arr[1]<<" "<<arr[2];
    
    return 0;
}

**If the function can determine the next higher permutation, it rearranges the elements as such and returns true. 
  If that was not possible (because it is already at the largest possible permutation), 
  it rearranges the elements according to the first permutation (sorted in ascending order) and returns false.

**Time Complexity- O(n)
**Space Complexity- O(1)

##Approach 3

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int i=nums.size()-2,j=nums.size()-1;;
        while(i>=0&&nums[i+1]<=nums[i])
        {;
            i--;
        }
        if(i>=0){
            while(nums[j]<=nums[i])
            {
                j--;
            }
            swap(nums[i],nums[j]);
        }
        i++;
        j = nums.size() - 1;
        while (i < j) {
            swap(nums[i],nums[j]);
            i++;
            j--;
        }
    }
};

**Time Complexity- O(n)
**Space Complexity- O(1)
