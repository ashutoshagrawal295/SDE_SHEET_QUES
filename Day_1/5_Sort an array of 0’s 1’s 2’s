#Given an array A[] consisting 0s, 1s and 2s. The task is to write a function that sorts the given array.

##Approach 1

Sort the array

**Time Complexity- O(n*(log(n)))
**Space Complexity- O(1)

##Approach 2

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int a,b,c;
        a=b=c=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==0)
            {
                a++;
            }
            else if(nums[i]==1)
            {
                b++;
            }
            else
            {
                c++;
            }
        }
        for(int i=0;i<a;i++)
        {
            nums[i]=0;
        }
        for(int i=a;i<a+b;i++)
        {
            nums[i]=1;
        }
        for(int i=a+b;i<a+b+c;i++)
        {
            nums[i]=2;
        }
    }
};

**Time Complexity- O(n)(two pass)
**Space Complexity- O(1)

##Approach 3

void sort012(int a[], int arr_size)
{
    int lo = 0;
    int hi = arr_size - 1;
    int mid = 0;
    while (mid <= hi) {
        switch (a[mid]) {
        case 0:
            swap(a[lo++], a[mid++]);
            break;
        case 1:
            mid++;
            break;
        case 2:
            swap(a[mid], a[hi--]);
            break;
        }
    }
}

**Time Complexity- O(n)(single pass)
**Space Complexity- O(1)
