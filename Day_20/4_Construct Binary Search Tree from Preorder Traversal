#Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

##Approach 1

class Solution {
public:
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        TreeNode* root=new TreeNode(preorder[0]);
        for(int i=1;i<preorder.size();i++)
        {
            TreeNode* temp=new TreeNode(preorder[i]);
            TreeNode* p=root,*pre;
            while(p)
            {
                pre=p;
                if(p->val<preorder[i])
                {
                    p=p->right;
                }
                else
                {
                    p=p->left;
                }
            }
            if(pre->val<preorder[i])
            {
                pre->right=temp;
            }
            else
            {
                pre->left=temp;
            }
        }
        return root;
    }
};

**Time Complexity- O(n*n)
**Space Complexity-O(1)

##Approach 2

by calculating inorder by sorting and then same as binary tree

**Time Complexity- O(nlogn)
**Space Complexity-O(n)

##Approach 3

class Solution {
public:
    TreeNode* build(vector<int>& preorder,int &index,int limit)
    {
        if(index==preorder.size()||preorder[index]>limit)
        {
            return NULL;
        }
        TreeNode* root=new TreeNode(preorder[index++]);
        root->left=build(preorder,index,root->val);
        root->right=build(preorder,index,limit);
        return root;
    }
    TreeNode* bstFromPreorder(vector<int>& preorder) {
        int l=0;
        return build(preorder,l,1001);
    }
};

**Time Complexity- O(n)
**Space Complexity-O(1)
