#Given the root of a binary tree, determine if it is a valid binary search tree (BST).

##Approach 1

class Solution {
public:
    void inorder(TreeNode* root,vector<int> &v)
    {
        if(root==NULL)
        {
            return;
        }
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }
    bool isValidBST(TreeNode* root) {
        vector<int> v;
        inorder(root,v);
        for(int i=0;i<v.size()-1;i++)
        {
            if(v[i]>=v[i+1])
            {
                return false;
            }
        }
        return true;
    }
};

**Time Complexity- O(n)
**Space Complexity- O(n)

##Approach 2

bool isBST(Node* root, Node* l=NULL, Node* r=NULL)
{
    if (root == NULL)
        return true;
    if (l != NULL and root->data <= l->data)
        return false;
    if (r != NULL and root->data >= r->data)
        return false;
    return isBST(root->left, l, root) and
           isBST(root->right, root, r);
}

**Time Complexity- O(n)
**Space Complexity- O(1)

##Approach 3

bool isBSTUtil(struct Node* root, Node *&prev)
{
    if (root)
    {
        if (!isBSTUtil(root->left, prev))
          return false;
        if (prev != NULL && root->data <= prev->data)
          return false;    
        prev = root;   
        return isBSTUtil(root->right, prev);
    }   
    return true;
}  
bool isBST(Node *root)
{
   Node *prev = NULL;
   return isBSTUtil(root, prev);
}

**Time Complexity- O(n)
**Space Complexity- O(1)
